# -*- coding: utf-8 -*-
"""Air Quality Index.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N1zoU3AU7Om2Cd847w5R32AiJeQd9upF

importing the dependecies
"""

import numpy as np

import pandas as pd

"""Importing Data Set"""

air_quality_data1 = pd.read_csv('/content/somajiguda,-hyderabad-air-quality.csv')

"""Printing first 5 columns of Dataset"""

air_quality_data1.head()

air_quality_data1.tail()

air_quality_data1.shape

air_quality_data1.info()

air_quality_data1.isnull().sum()

"""The data is basically considered as object but we need numeric to replace the missing ones with mean

"""

# Clean 'pm25' column by removing extra spaces and non-numeric characters
air_quality_data1['pm25'] = pd.to_numeric(air_quality_data1['pm25'], errors='coerce')

print(air_quality_data1.columns)

# Clean 'pm25' column by removing extra spaces and non-numeric characters
air_quality_data1['pm25'] = pd.to_numeric(air_quality_data1['pm25'], errors='coerce')

# List all columns to check for any discrepancies in the column names
print(air_quality_data1.columns)

# Clean 'pm25' column by removing any hidden characters or spaces
air_quality_data1.columns = air_quality_data1.columns.str.strip()

# Convert the 'pm25' column to numeric, coercing errors to NaN
air_quality_data1['pm25'] = pd.to_numeric(air_quality_data1['pm25'], errors='coerce')

# Replace missing values for 'pm25' between rows 893 and 956 with the mean value of 'pm25'
air_quality_data1.loc[893:956, 'pm25'] = air_quality_data1.loc[893:956, 'pm25'].fillna(air_quality_data1['pm25'].mean())

# Verify the updated rows
print(air_quality_data1.iloc[893:956])

air_quality_data1.tail()

data = pd.DataFrame()

data['ds'] = air_quality_data1['date']

data['y'] = air_quality_data1['pm25']

!pip install prophet

import prophet as Prophet

# Import the Prophet class from the prophet library
from prophet import Prophet

# Create an instance of the Prophet class
model = Prophet()

# Fit the model with the prepared data
model.fit(data)

future = model.make_future_dataframe(periods=365)
future.tail()

forecast = model.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

fig1 = model.plot(forecast)